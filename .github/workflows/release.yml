name: Publish Release

on:
  push:
    branches:
      - release

jobs:
  prepare-release:
    name: Prepare Release Info
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PRIVATE_TOKEN }}

      # Get the version tag and prepare header
      - name: Get version
        id: version
        run: |
          if ! LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null); then
            # If no tags exist, get first commit
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            LATEST_TAG="$(git rev-parse --short HEAD)"
            HEADER="## [${LATEST_TAG}](https://github.com/ShadowCat117/Wynntils/commits/${FIRST_COMMIT}..HEAD) ($(date +'%Y-%m-%d'))"
          else
            if PREVIOUS_TAG=$(git describe --tags --abbrev=0 `git rev-list --tags --skip=1 --max-count=1` 2>/dev/null); then
              HEADER="## [${LATEST_TAG}](https://github.com/ShadowCat117/Wynntils/compare/${PREVIOUS_TAG}...${LATEST_TAG}) ($(date +'%Y-%m-%d'))"
            else
              # If only one tag exists, show all history from first commit
              FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
              HEADER="## [${LATEST_TAG}](https://github.com/ShadowCat117/Wynntils/compare/${FIRST_COMMIT}...${LATEST_TAG}) ($(date +'%Y-%m-%d'))"
            fi
          fi
          echo "tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "header=${HEADER}" >> $GITHUB_OUTPUT

      # Read and format changelog
      - name: Prepare changelog
        id: changelog
        run: |
          # Create the formatted changelog
          {
            echo "${{ steps.version.outputs.header }}"
            echo ""
            cat CHANGELOG.md
          } >> release_notes.md
          
          # Set the content as output (escape newlines for GitHub Actions)
          content=$(cat release_notes.md)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "content=$content" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: [prepare-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle data
        uses: actions/cache@v4
        with:
          path: .gradle
          key: ${{ runner.os }}-gradle--${{ hashFiles('**/settings.gradle', '**/gradle.properties') }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 21
          cache: "gradle"

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew buildDependents -x spotlessCheck -x test

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            **/build/libs/*-fabric+MC-*.jar
            **/build/libs/*-neoforge+MC-*.jar
          if-no-files-found: error
          overwrite: true

  release:
    name: Release to Github and Discord
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [build, prepare-release]
    steps:
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Create release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          body: ${{ needs.prepare-release.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            **/build/libs/*-fabric+MC-*.jar
            **/build/libs/*-neoforge+MC-*.jar

      - name: Set current date
        id: date
        run: |
          echo "short=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "long=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT
            
      - name: Post release on Discord
        uses: tsickert/discord-webhook@v6.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_RELEASE_WEBHOOK_URL }}
          embed-color: "9498256"
          embed-title: ${{format('Wynntils {0}', needs.prepare-release.outputs.tag)}}
          embed-description: ${{ needs.prepare-release.outputs.changelog }}
          embed-url: ${{ steps.release.outputs.url }}
          embed-timestamp: ${{ steps.date.outputs.long }}
