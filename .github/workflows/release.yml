name: Publish Release

on:
  push:
    branches:
      - release

jobs:
  prepare-release:
    name: Prepare Release Info
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PRIVATE_TOKEN }}

      # Get the version tag and prepare header
      - name: Get version
        id: version
        run: |
          if ! LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null); then
            # If no tags exist, get first commit
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            LATEST_TAG="$(git rev-parse --short HEAD)"
            HEADER="## [${LATEST_TAG}](https://github.com/ShadowCat117/Wynntils/commits/${FIRST_COMMIT}..HEAD) ($(date +'%Y-%m-%d'))"
          else
            if PREVIOUS_TAG=$(git describe --tags --abbrev=0 `git rev-list --tags --skip=1 --max-count=1` 2>/dev/null); then
              HEADER="## [${LATEST_TAG}](https://github.com/ShadowCat117/Wynntils/compare/${PREVIOUS_TAG}...${LATEST_TAG}) ($(date +'%Y-%m-%d'))"
            else
              # If only one tag exists, show all history from first commit
              FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
              HEADER="## [${LATEST_TAG}](https://github.com/ShadowCat117/Wynntils/compare/${FIRST_COMMIT}...${LATEST_TAG}) ($(date +'%Y-%m-%d'))"
            fi
          fi
          echo "tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "header=${HEADER}" >> $GITHUB_OUTPUT

      # Read and format changelog
      - name: Prepare changelog
        id: changelog
        run: |
          # Create the formatted changelog
          {
            echo "${{ steps.version.outputs.header }}"
            echo ""
            cat CHANGELOG.md
          } >> release_notes.md
          
          # Set the content as output (escape newlines for GitHub Actions)
          content=$(cat release_notes.md)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "content=$content" >> $GITHUB_OUTPUT
          